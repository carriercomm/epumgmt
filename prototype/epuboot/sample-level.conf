# every svc section describes a needed service.  There are a few different
# ways to bring up a service.  Every service in this file is run at the 
# same time, and is considered a single runlevel.
#
# there is a top level conf file that organizes files like this into levels

# this examples shows a service that is started by booting an AMI in
# ec2-east
[svc-sampleservice]
image: ami-blahblah
iaas: ec2-east
allocation: m1.small
sshkeyname: ooi
localsshkeypath: ~/.ssh/ooi.pem
ssh_username: ubuntu
scp_username: cc

# the bootconf variable points to a json file that is passed to chef in order
# to estblish the env on the vm
bootconf: sample.json

# test is a local program that is scp'ed (via fabric) to the VM and run
# it blocks until the machine is ready to go
test: /opt/sample/sample-test.sh
# deps points to a file that will contain a list of key/value pairs that
# represent the needs of the service.  These values (and many above)
# are used to sub in the information in the json bootconf file.  See
# sample-deps.conf for an example
deps: sample-deps.conf

# it is also possible to provide the service configuration with an already
# running instance.  Here we all of the same values, except instead of 
# needing an image id, we need the IP if the running instance and the
# instance ID or handle
[svc-cassandra]
instanceip: 1.2.3.4
instanceid: i-f23bd1

iaas: ec2-east
allocation: m1.small
sshkeyname: ooi
localsshkeypath: ~/.ssh/ooi.pem
ssh_username: ubuntu
scp_username: cc
bootconf: cassandra.conf
tests: /opt/cassandra/cassandra-test.py
deps: cassandra.conf

# a service description can also be a pointer to another top level service
# file.  This allows the description of levels within a level
[svc-sublevel1]
sublevel: sublevel1.conf
